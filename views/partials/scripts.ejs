<script>
  function toggleMatch(matchId) {
    const card = document.getElementById(matchId);
    card.classList.toggle('active');
    saveOpenMatches();
  }
  
  function saveOpenMatches() {
    const openMatches = Array.from(document.querySelectorAll('.match-card.active')).map(card => card.id);
    localStorage.setItem('openMatches', JSON.stringify(openMatches));
  }
  
  function restoreOpenMatches() {
    const stored = localStorage.getItem('openMatches');
    if (stored) {
      const openMatches = JSON.parse(stored);
      openMatches.forEach(matchId => {
        const card = document.getElementById(matchId);
        if (card) card.classList.add('active');
      });
    }
  }
  
  // Find the next match card (first non-completed match)
  function findNextMatchCard() {
    // First check for Currently Playing matches
    let matchGroups = document.querySelectorAll('.match-group');
    for (const group of matchGroups) {
      const groupTitle = group.querySelector('.match-group-title');
      if (groupTitle && groupTitle.textContent.includes('Currently Playing')) {
        const cards = group.querySelectorAll('.match-card');
        if (cards.length > 0) return cards[0];
      }
    }
    
    // Then check for Next Up matches
    for (const group of matchGroups) {
      const groupTitle = group.querySelector('.match-group-title');
      if (groupTitle && groupTitle.textContent.includes('Next Up')) {
        const cards = group.querySelectorAll('.match-card');
        if (cards.length > 0) return cards[0];
      }
    }
    
    // Finally check for any non-completed match
    const allMatchCards = document.querySelectorAll('.match-card');
    for (const card of allMatchCards) {
      if (!card.closest('.match-group').querySelector('.match-group-title').textContent.includes('Completed')) {
        return card;
      }
    }
    
    return null;
  }
  
  // Auto-open the next match card
  function openNextMatchCard() {
    const nextMatchCard = findNextMatchCard();
    if (nextMatchCard) {
      console.log('Found next match card:', nextMatchCard.id);
      nextMatchCard.classList.add('active');
      saveOpenMatches();
      
      // Scroll to the next match card
      nextMatchCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
      return nextMatchCard;
    } else {
      console.log('No next match card found');
      return null;
    }
  }
  
  // Collapse all match cards except for the next match
  function collapseOtherMatchCards(nextMatchCard) {
    if (!nextMatchCard) return;
    
    console.log('Collapsing matches except:', nextMatchCard.id);
    const allMatchCards = document.querySelectorAll('.match-card.active');
    allMatchCards.forEach(card => {
      if (card.id !== nextMatchCard.id) {
        card.classList.remove('active');
      }
    });
    saveOpenMatches();
  }
  
  let currentDataHash = "";
  let checkInterval = 10000; // 10 seconds interval
  let updateTimer;
  let serverTimeOffset = 0; // Store the difference between server and client time
  let collapseTimer; // Timer for collapsing other match cards
  let autoOpenedMatchId = null; // Track the automatically opened match
  
  // Check if client clock is synchronized with EST
  function checkClockSync(serverTimestamp) {
    const clientTime = Date.now();
    const timeDiff = Math.abs(clientTime - serverTimestamp);
    
    if (timeDiff > 5000) { // More than 5 seconds difference
      console.log(`Clock desync detected: ${timeDiff}ms difference`);
      serverTimeOffset = serverTimestamp - clientTime;
      
      // Add a warning to the UI
      const updateStatus = document.getElementById('update-status');
      if (updateStatus) {
        updateStatus.innerHTML += ` <span style="color: #ff9800;">(Clock desync detected: ${Math.round(timeDiff/1000)}s)</span>`;
      }
      
      // Update any time displays that might be on the page
      updateSyncedClock();
      return false;
    }
    return true;
  }
  
  // Get the current time adjusted for any server-client difference
  function getSyncedTime() {
    return new Date(Date.now() + serverTimeOffset);
  }
  
  // Update any clock elements on the page with the synced time
  function updateSyncedClock() {
    const clockTime = document.getElementById('clock-time');
    const clockDate = document.getElementById('clock-date');
    
    if (clockTime && clockDate) {
      const syncedNow = getSyncedTime();
      
      clockTime.textContent = syncedNow.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
      });
      
      clockDate.textContent = syncedNow.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }
  }
  
  // Initialize auto-opening functionality
  function initializeMatchDisplay() {
    console.log('Initializing match display behavior');
    
    // Clear any existing collapse timer
    if (collapseTimer) {
      clearTimeout(collapseTimer);
    }
    
    // Automatically open the next match card
    const nextMatchCard = openNextMatchCard();
    
    // Store the ID of the automatically opened match card
    if (nextMatchCard) {
      autoOpenedMatchId = nextMatchCard.id;
      console.log('Auto-opened match ID:', autoOpenedMatchId);
    }
  }
  
  // Check if a match is completed
  function isMatchCompleted(matchId) {
    const card = document.getElementById(matchId);
    if (!card) return false;
    
    // Check if the match card is in a completed group
    const group = card.closest('.match-group');
    if (!group) return false;
    
    const groupTitle = group.querySelector('.match-group-title');
    return groupTitle && groupTitle.textContent.includes('Completed');
  }
  
  // Close a match card
  function closeMatchCard(matchId) {
    const card = document.getElementById(matchId);
    if (card && card.classList.contains('active')) {
      console.log('Closing completed match card:', matchId);
      card.classList.remove('active');
      saveOpenMatches();
    }
  }  // SSE connection for real-time updates
  let eventSource = null;
  let reconnectAttempts = 0;
  const maxReconnectAttempts = 5;
  let fallbackToPolling = false;
  let isConnecting = false;
  let lastHeartbeatTime = 0;
  let heartbeatWatchdog = null;
  let successfulPollingCount = 0;
  function startHeartbeatWatchdog() {
    // Clear existing watchdog
    if (heartbeatWatchdog) {
      clearInterval(heartbeatWatchdog);
    }
    
    // Check every 10 seconds (server sends heartbeat every 10 seconds)
    heartbeatWatchdog = setInterval(() => {
      const now = Date.now();
      const timeSinceLastHeartbeat = now - lastHeartbeatTime;
      
      // If no heartbeat for 25 seconds, assume connection is dead
      if (lastHeartbeatTime > 0 && timeSinceLastHeartbeat > 25000) {
        console.log('SSE connection appears dead - no heartbeat for', Math.round(timeSinceLastHeartbeat/1000), 'seconds');
        
        // Force close the connection and trigger reconnection
        if (eventSource) {
          eventSource.close();
          eventSource = null;
        }
        
        // Clear the watchdog
        clearInterval(heartbeatWatchdog);
        heartbeatWatchdog = null;
        
        // Reset connection state
        isConnecting = false;
        lastHeartbeatTime = 0;
        
        // Trigger reconnection
        const updateStatus = document.getElementById('update-status');
        if (updateStatus) {
          updateStatus.innerHTML = 'Connection lost. Attempting to reconnect...';
        }
        
        // Start reconnection with faster backoff for Cloudflare
        if (reconnectAttempts < maxReconnectAttempts) {
          reconnectAttempts++;
          const delay = Math.min(500 * reconnectAttempts, 3000); // Faster reconnection for Cloudflare
          setTimeout(() => {
            initializeSSE();
          }, delay);
        } else {
          console.log('SSE failed after max attempts, falling back to polling');
          if (updateStatus) {
            updateStatus.innerHTML = 'SSE disconnected, to reconnect <a href="#" onclick="location.reload(); return false;" style="color: #2196F3; text-decoration: underline; cursor: pointer;">refresh</a>';
          }
          fallbackToPolling = true;
          setTimeout(checkForUpdates, 5000);
        }
      }
    }, 10000); // Check every 10 seconds for faster detection
  }function initializeSSE() {
    const updateStatus = document.getElementById('update-status');
    const hashDisplay = document.getElementById('hash-display');
    
    // Prevent multiple simultaneous connection attempts
    if (isConnecting) {
      console.log('SSE connection attempt already in progress');
      return;
    }
    
    isConnecting = true;
    
    // Clear existing heartbeat watchdog
    if (heartbeatWatchdog) {
      clearInterval(heartbeatWatchdog);
      heartbeatWatchdog = null;
    }
    lastHeartbeatTime = 0;
    
    // Close existing connection if any
    if (eventSource) {
      console.log('Closing existing SSE connection');
      eventSource.close();
    }    const sseUrl = '/api/updates-stream?eventKey=' + encodeURIComponent('<%= eventKey %>') 
      + '&teamKey=' + encodeURIComponent('<%= formattedTeamKey %>');
    
    console.log('Attempting SSE connection to:', sseUrl);
    eventSource = new EventSource(sseUrl);
    
    console.log('EventSource created, readyState:', eventSource.readyState);
    
    eventSource.onopen = function(event) {
      console.log('SSE connection opened successfully', event);
      console.log('EventSource readyState after open:', eventSource.readyState);
      isConnecting = false;
      reconnectAttempts = 0;
      fallbackToPolling = false;
      updateStatus.innerHTML = 'Connected to real-time updates';
    };
      eventSource.onmessage = function(event) {
      try {
        const data = JSON.parse(event.data);
        console.log('SSE message received:', data.type);
        
        if (data.type === 'connected') {
          console.log('SSE connected successfully');
          updateStatus.innerHTML = 'Real-time updates active';
          lastHeartbeatTime = Date.now(); // Mark connection time
          successfulPollingCount = 0; // Reset polling count since SSE is working
          startHeartbeatWatchdog(); // Start monitoring
          // Initialize hash display if provided
          if (data.hash && hashDisplay) {
            currentDataHash = data.hash;
            const shortHash = currentDataHash.substring(0, 8);
            hashDisplay.innerHTML = 'Hash: ' + shortHash;
          }
        } else if (data.type === 'update') {
          console.log('Received update via SSE');
          lastHeartbeatTime = Date.now(); // Reset heartbeat timer on any message
          // Update hash display with the hash from SSE
          if (data.hash && hashDisplay) {
            currentDataHash = data.hash;
            const shortHash = currentDataHash.substring(0, 8);
            hashDisplay.innerHTML = 'Hash: ' + shortHash;
          }
          handleRealtimeUpdate();
          updateNextMatchSidebar(data);
        } else if (data.type === 'heartbeat') {
          // Update last seen timestamp and reset watchdog
          lastHeartbeatTime = Date.now();
          const lastChecked = getSyncedTime().toLocaleTimeString();
          updateStatus.innerHTML = 'Data provided by FIRST Nexus & TBA APIs' + ' • Last update: ' + lastChecked;
          // Update hash display if available
          if (data.hash && hashDisplay) {
            currentDataHash = data.hash;
            const shortHash = currentDataHash.substring(0, 8);
            hashDisplay.innerHTML = 'Hash: ' + shortHash;
          }
          checkClockSync(data.timestamp);
        } else if (data.type === 'reconnect') {
          console.log('Server requested reconnection:', data.reason);
          // Server is asking us to reconnect (likely to prevent Cloudflare timeout)
          if (eventSource) {
            eventSource.close();
          }
          // Reset connection state and reconnect immediately
          isConnecting = false;
          reconnectAttempts = 0; // Reset attempts since this is a planned reconnection
          setTimeout(() => {
            initializeSSE();
          }, 1000); // Short delay before reconnecting
        }
      } catch (error) {
        console.error('Error parsing SSE data:', error);
      }
    };    eventSource.onerror = function(error) {
      console.error('SSE error:', error);
      console.log('SSE readyState:', eventSource.readyState);
      isConnecting = false;
      
      // Clear the heartbeat watchdog on error
      if (heartbeatWatchdog) {
        clearInterval(heartbeatWatchdog);
        heartbeatWatchdog = null;
      }
      lastHeartbeatTime = 0;
      
      // Check if this is a Cloudflare timeout (524 error) or connection closed
      if (eventSource.readyState === EventSource.CLOSED) {
        console.log('SSE connection closed by server (likely Cloudflare timeout)');
        updateStatus.innerHTML = 'Connection reset. Reconnecting...';
      } else {
        updateStatus.innerHTML = 'Connection error. Attempting to reconnect...';
      }
      
      if (reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts++;
        // Use very short delays for Cloudflare timeouts since they're expected
        const delay = eventSource.readyState === EventSource.CLOSED ? 
          Math.min(200 * reconnectAttempts, 2000) : // Very fast reconnect for Cloudflare timeouts
          Math.min(1000 * reconnectAttempts, 5000); // Normal reconnect for other errors
        
        console.log(`Will reconnect SSE in ${delay}ms (attempt ${reconnectAttempts})`);
        setTimeout(() => {
          console.log(`Reconnecting SSE (attempt ${reconnectAttempts})`);
          initializeSSE();
        }, delay);
      } else {
        console.log('SSE failed after max attempts, falling back to polling');
        updateStatus.innerHTML = 'SSE disconnected, to reconnect <a href="#" onclick="location.reload(); return false;" style="color: #2196F3; text-decoration: underline; cursor: pointer;">refresh</a>';
        fallbackToPolling = true;
        setTimeout(checkForUpdates, 5000);
      }
    };
  }  async function handleRealtimeUpdate() {
    const updateStatus = document.getElementById('update-status');
    
    try {
      console.log('Handling realtime update');
      // Fetch the processed match data
      const response = await fetch('/api/current-matches?eventKey=' + encodeURIComponent('<%= eventKey %>') 
        + '&teamKey=' + encodeURIComponent('<%= formattedTeamKey %>'));
      
      if (!response.ok) {
        throw new Error(`Failed to fetch current matches: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Received updated match data:', data);
      console.log('Match groups structure:', data.matchGroups);
      console.log('Completed matches count:', data.completedMatches ? data.completedMatches.length : 0);
      
      // Validate data structure before proceeding
      if (!data || typeof data !== 'object') {
        throw new Error('Invalid data structure received from server');
      }
      
      // Save currently open matches
      saveOpenMatches();
        // Update the UI with new data
      updateMatchesUI(data);
      updateEventInfo(data.nowQueuing);
      updateTeamRanking(data.teamRanking);
      updateNextMatchSidebar(data);
      
      // Check if the auto-opened match is now completed
      if (autoOpenedMatchId && isMatchCompleted(autoOpenedMatchId)) {
        closeMatchCard(autoOpenedMatchId);
        autoOpenedMatchId = null;
        
        // Automatically open the next match card
        const nextMatchCard = openNextMatchCard();
        if (nextMatchCard) {
          autoOpenedMatchId = nextMatchCard.id;
        }
      }
      
      // Restore open matches
      restoreOpenMatches();
      
      const lastChecked = getSyncedTime().toLocaleTimeString();
      updateStatus.innerHTML = 'Data provided by FIRST Nexus & TBA APIs' + ' • Last update: ' + lastChecked;
      
    } catch (error) {
      console.error('Error handling realtime update:', error);
      updateStatus.innerHTML = 'Update failed. Retrying...';
      
      // If this is a JSON parsing error, it might indicate server issues
      if (error.name === 'SyntaxError' && error.message.includes('JSON')) {
        console.error('JSON parsing error - server may have returned HTML error page');
      }
    }
  }
  // Fallback polling function (used if SSE fails)
  async function checkForUpdates() {
    const updateStatus = document.getElementById('update-status');
    const hashDisplay = document.getElementById('hash-display');
    
    // Don't run polling if SSE is working
    if (!fallbackToPolling) {
      return;
    }
    
    try {
      updateStatus.innerHTML = 'Checking for updates...';
      const response = await fetch('/api/data-check?eventKey=' + encodeURIComponent('<%= eventKey %>') 
        + '&teamKey=' + encodeURIComponent('<%= formattedTeamKey %>') 
        + '&lastUpdate=' + currentDataHash);
      const data = await response.json();
      
      // Check clock sync using server timestamp
      if (data.timestamp) {
        checkClockSync(data.timestamp);
      }
        if (data.changed) {
        console.log('Polling detected changes, updating UI');
        handleRealtimeUpdate();
        
        // Network is working again, try to re-establish SSE connection
        if (fallbackToPolling) {
          console.log('Network appears to be working, attempting to re-establish SSE connection');
          fallbackToPolling = false; // Stop polling
          reconnectAttempts = 0; // Reset reconnection attempts
          
          // Clear any existing update timer
          if (updateTimer) {
            clearTimeout(updateTimer);
            updateTimer = null;
          }
          
          // Try to reconnect to SSE
          setTimeout(() => {
            initializeSSE();
          }, 1000); // Small delay to let the current update finish
          
          return; // Don't continue with polling
        }
      } else {
        // Check if the auto-opened match is now completed
        if (autoOpenedMatchId && isMatchCompleted(autoOpenedMatchId)) {
          closeMatchCard(autoOpenedMatchId);
          autoOpenedMatchId = null; // Reset after closing
          
          // Automatically open the next match card
          const nextMatchCard = openNextMatchCard();
          if (nextMatchCard) {
            autoOpenedMatchId = nextMatchCard.id;
          }
        }
          currentDataHash = data.hash;
        const shortHash = currentDataHash.substring(0, 8);
        const lastChecked = getSyncedTime().toLocaleTimeString();
        updateStatus.innerHTML = 'Data provided by FIRST Nexus & TBA APIs' + ' • Last checked: ' + lastChecked;
        if (hashDisplay) hashDisplay.innerHTML = 'Hash: ' + shortHash;
        
        // Track successful polling - try to reconnect to SSE after a few successful polls
        if (fallbackToPolling) {
          successfulPollingCount++;
          if (successfulPollingCount >= 3) { // After 3 successful polls, try SSE again
            console.log('Network stable, attempting to re-establish SSE connection');
            fallbackToPolling = false;
            reconnectAttempts = 0;
            successfulPollingCount = 0;
            
            // Clear any existing update timer
            if (updateTimer) {
              clearTimeout(updateTimer);
              updateTimer = null;
            }
            
            // Try to reconnect to SSE
            setTimeout(() => {
              initializeSSE();
            }, 1000);
            
            return; // Don't continue with polling
          }
        }
      }
      
      // Continue polling if we're in fallback mode
      if (fallbackToPolling) {
        updateTimer = setTimeout(checkForUpdates, checkInterval);
      }    } catch (error) {
      console.error('Error checking for updates:', error);
      updateStatus.innerHTML = 'Update check failed. Retrying soon...';
      
      // Reset successful polling count on error
      successfulPollingCount = 0;
      
      if (fallbackToPolling) {
        updateTimer = setTimeout(checkForUpdates, checkInterval * 2);
      }
    }
  }

  // Function to fetch initial hash on page load
  async function fetchInitialHash() {
    const hashDisplay = document.getElementById('hash-display');
    
    try {
      const response = await fetch('/api/data-check?eventKey=' + encodeURIComponent('<%= eventKey %>') 
        + '&teamKey=' + encodeURIComponent('<%= formattedTeamKey %>') 
        + '&lastUpdate=');
      const data = await response.json();
      
      if (data.hash && hashDisplay) {
        currentDataHash = data.hash;
        const shortHash = currentDataHash.substring(0, 8);
        hashDisplay.innerHTML = 'Hash: ' + shortHash;
      }
    } catch (error) {
      console.error('Error fetching initial hash:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded - Initializing match system');
    
    // Wait a short time to ensure all elements are fully rendered
    setTimeout(() => {
      initializeMatchDisplay();
    }, 100);
      // Try SSE first, with fallback to polling
    setTimeout(() => {
      console.log('Initializing update system...');
      
      // Fetch initial hash
      fetchInitialHash();
      
      // Check if SSE is supported
      if (typeof(EventSource) !== "undefined") {
        console.log('SSE supported, attempting connection');
        initializeSSE();
      } else {
        console.log('SSE not supported, falling back to polling');
        fallbackToPolling = true;
        checkForUpdates();
      }
    }, 1000);
    
    // Start clock updates
    updateSyncedClock();
    setInterval(updateSyncedClock, 1000);
      // Handle page visibility changes
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible') {
        console.log('Page visible, reconnecting if needed');
        // Only reconnect SSE if it was actually disconnected and we're not using polling
        if (!fallbackToPolling && eventSource && eventSource.readyState === EventSource.CLOSED) {
          console.log('Reconnecting SSE after page became visible');
          initializeSSE();
        }
      } else {
        console.log('Page hidden, keeping SSE connection alive');
        // Don't close SSE connection when page is hidden - let it stay alive
        // Only clear polling timers if they exist
        if (updateTimer) {
          clearTimeout(updateTimer);
        }
      }
    });
    
    // Handle page unload
    window.addEventListener('beforeunload', () => {
      if (eventSource) {
        eventSource.close();
      }
      if (updateTimer) {
        clearTimeout(updateTimer);
      }
    });
  });
  
  // Format all timestamps to local timezone
  function formatAllTimestamps() {
    console.log("Running timestamp formatter");
    
    // Format match header times
    document.querySelectorAll('[data-timestamp]').forEach(el => {
      const timestamp = el.getAttribute('data-timestamp');
      console.log("Processing timestamp:", timestamp, "for element:", el.className);
      
      // Check if timestamp exists and is valid
      if (timestamp && timestamp !== "null" && timestamp !== "undefined" && timestamp !== "") {
        try {
          // Try parsing the timestamp - support both ISO strings and Unix timestamps
          let date;
          
          // If it's a number (unix timestamp in milliseconds), convert it
          if (!isNaN(timestamp) && timestamp.length > 10) {
            date = new Date(parseInt(timestamp));
          } else {
            // Otherwise treat as ISO string
            date = new Date(timestamp);
          }
          
          console.log("Parsed date:", date);
          
          if (!isNaN(date.getTime())) {
            // Format the valid date
            el.textContent = date.toLocaleTimeString('en-US', {
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
            console.log("Formatted time:", el.textContent);
          } else {
            console.log("Invalid date after parsing:", date);
            // For debugging, show the raw timestamp
            el.textContent = "TBD [Invalid: " + timestamp.substring(0, 30) + "]";
          }
        } catch (e) {
          console.error("Error formatting timestamp:", timestamp, e);
          el.textContent = "TBD [Error]";
        }
      } else {
        console.log("Empty or null timestamp");
        el.textContent = "TBD [No Time]";
      }
    });
  }
  
  // Call when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded, formatting timestamps");
    formatAllTimestamps();
  });
  // UI update functions for SSE
  function updateMatchesUI(data) {
    console.log('updateMatchesUI called with data:', data);
    const matchesColumn = document.querySelector('.matches-column .content');
    if (!matchesColumn) {
      console.error('Matches column not found in DOM');
      return;
    }
    
    // Add null checks for data structure
    if (!data || typeof data !== 'object') {
      console.error('Invalid data received for updateMatchesUI:', data);
      return;
    }

    // Generate new HTML for matches
    let newHTML = '';
    
    // Ensure matchGroups exists and is an object
    const matchGroups = data.matchGroups || {};
    const completedMatches = data.completedMatches || [];
    
    console.log('Processing match groups:', Object.keys(matchGroups));
    console.log('Processing completed matches count:', completedMatches.length);
    
    // Handle empty matches case
    if (Object.keys(matchGroups).length === 0 && completedMatches.length === 0) {
      console.log('No matches to display, showing no-matches message');
      newHTML = `
        <div class="no-matches">
          <p>No matches found for team <%= formattedTeamKey %></p>
        </div>
      `;
    } else {
      // Active/Upcoming Matches
      Object.keys(matchGroups).forEach(groupType => {
        if (matchGroups[groupType] && Array.isArray(matchGroups[groupType])) {
          console.log(`Adding match group ${groupType} with ${matchGroups[groupType].length} matches`);
          newHTML += generateMatchGroupHTML(groupType, matchGroups[groupType], false);
        } else {
          console.warn(`Invalid match group data for ${groupType}:`, matchGroups[groupType]);
        }
      });
      
      // Completed Matches
      if (completedMatches.length > 0) {
        console.log(`Adding completed matches: ${completedMatches.length}`);
        newHTML += generateMatchGroupHTML('Completed', completedMatches, true);
      }
    }
    
    console.log('Generated HTML length:', newHTML.length);
    matchesColumn.innerHTML = newHTML;
    
    // Re-run timestamp formatting for new content
    formatAllTimestamps();
    console.log('updateMatchesUI completed');
  }

  function updateEventInfo(nowQueuing) {
    const nowQueuingElement = document.querySelector('.now-queuing');
    if (nowQueuingElement && nowQueuing) {
      nowQueuingElement.textContent = 'Now Queuing: ' + nowQueuing;
    }
  }

  function updateTeamRanking(teamRanking) {
    if (!teamRanking) return;
    
    const rankElement = document.querySelector('.stat-card .stat-value');
    const recordElement = document.querySelectorAll('.stat-card .stat-value')[1];
    const matchesPlayedElement = document.querySelectorAll('.stat-card .stat-value')[2];
    
    if (rankElement) rankElement.textContent = '#' + teamRanking.rank;
    if (recordElement) recordElement.textContent = teamRanking.record;
    if (matchesPlayedElement) matchesPlayedElement.textContent = teamRanking.matchesPlayed || "N/A";
  }
  function generateMatchGroupHTML(groupType, matches, isCompletedGroup) {
    if (!matches || matches.length === 0) return '';
    
    const formattedTeamKey = '<%= formattedTeamKey %>';
    
    let html = `
      <div class="match-group">
        <div class="match-group-title">${groupType}</div>
        <div class="match-group-content">
    `;
    
    matches.forEach(match => {
      const redTeams = match.redTeams || [];
      const blueTeams = match.blueTeams || [];
      const isRed = redTeams.includes(formattedTeamKey);
      const allianceColor = isRed ? "red" : "blue";
      
      const matchId = match.label.replace(/\s+/g, '-');
      
      // Format time display
      let timeDisplay = "TBD";
      let rawScheduledTime = "";
      if (match.times && match.times.scheduledStartTime) {
        rawScheduledTime = match.times.scheduledStartTime;
        try {
          const matchDate = new Date(match.times.scheduledStartTime);
          if (!isNaN(matchDate.getTime())) {
            timeDisplay = matchDate.toLocaleTimeString('en-US', {
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
          }
        } catch (e) {
          console.error("Error formatting scheduled time:", e);
        }
      }
      
      // Status classes
      let statusClass = "status-default";
      if (match.status === "Now queuing") statusClass = "status-queuing";
      else if (match.status === "On deck") statusClass = "status-on-deck";
      else if (match.status === "On field") statusClass = "status-on-field";
      
      // Result classes and text
      let resultClass = "";
      let resultText = "";
      if (match.result === "win") {
        resultClass = "result-win";
        resultText = "Win";
      } else if (match.result === "loss") {
        resultClass = "result-loss";
        resultText = "Loss";
      } else if (match.result === "tie") {
        resultClass = "result-tie";
        resultText = "Tie";
      }
      
      html += `
        <div class="match-card" id="match-${matchId}">
          <div class="match-header" onclick="toggleMatch('match-${matchId}')">
            <div class="match-header-left">
              <div class="alliance-dot ${allianceColor}-alliance"></div>
              <div class="match-number">${match.label}</div>
              <div class="match-status ${statusClass}">${match.status}</div>
              ${match.status === "Completed" && match.result ? `
                <div class="match-result ${resultClass}">${resultText}</div>
                ${match.rankingPoints && match.rankingPoints.total !== undefined ? `
                  <div class="match-rp">${match.rankingPoints.total} RP</div>
                ` : ''}
                ${match.score ? `
                  <div class="match-score">${match.score.alliance} - ${match.score.opposing}</div>
                ` : ''}
              ` : ''}
            </div>
            <div class="match-time" data-timestamp="${rawScheduledTime}">
              ${timeDisplay}
            </div>
          </div>
          <div class="match-content">
            <div class="match-details">
              <div class="alliance-section">
                <div class="alliance-title red-title">Red Alliance</div>
                <div class="alliance-teams">
                  ${redTeams.map(team => `
                    <div class="team-chip red-team ${team === formattedTeamKey ? 'highlight' : ''}">Team ${team}</div>
                  `).join('')}
                </div>
              </div>
              <div class="alliance-section">
                <div class="alliance-title blue-title">Blue Alliance</div>
                <div class="alliance-teams">
                  ${blueTeams.map(team => `
                    <div class="team-chip blue-team ${team === formattedTeamKey ? 'highlight' : ''}">Team ${team}</div>
                  `).join('')}
                </div>
              </div>
              
              ${match.status === "Completed" && match.rankingPoints ? `
                <div class="result-section">
                  <div class="result-title ${resultClass ? 'result-' + match.result + '-title' : ''}">
                    Ranking Points: ${match.rankingPoints.total}
                  </div>
                  ${match.rankingPoints.breakdown && match.rankingPoints.breakdown.length > 0 ? `
                    <div class="rp-breakdown">
                      ${match.rankingPoints.breakdown.map(rp => `
                        <div class="rp-item">${rp}</div>
                      `).join('')}
                    </div>
                  ` : ''}
                </div>
              ` : ''}
              
              <div class="time-section">
                <div class="time-label">Match Times</div>
                <div class="time-row">
                  Scheduled: <span class="formatted-time" data-timestamp="${rawScheduledTime}">${timeDisplay}</span>
                </div>
                ${match.times && match.times.estimatedStartTime ? `
                  <div class="time-row">
                    Estimated: <span class="formatted-time" data-timestamp="${match.times.estimatedStartTime}">${formatMatchTime(match.times.estimatedStartTime)}</span>
                  </div>
                ` : ''}
              </div>
              
              ${match.breakAfter ? `
                <div class="break-indicator">
                  Break after this match: ${match.breakAfter}
                </div>
              ` : ''}
            </div>
          </div>
        </div>
      `;
    });
    
    html += `
        </div>
      </div>
    `;
    
    return html;
  }

  function formatMatchTime(timestamp) {
    if (!timestamp || timestamp === "null" || timestamp === "undefined" || timestamp === "") {
      return "TBD";
    }
    
    try {
      let date;
      if (!isNaN(timestamp) && timestamp.length > 10) {
        date = new Date(parseInt(timestamp));
      } else {
        date = new Date(timestamp);
      }
      
      if (!isNaN(date.getTime())) {
        return date.toLocaleTimeString('en-US', {
          hour: 'numeric',
          minute: '2-digit',
          hour12: true
        });
      }
    } catch (e) {
      console.error("Error formatting timestamp:", timestamp, e);
    }
    
    return "TBD";
  }

  function getStatusClass(status) {
    if (!status) return 'status-default';
    
    const statusLower = status.toLowerCase();
    if (statusLower.includes('queuing')) return 'status-queuing';
    if (statusLower.includes('deck')) return 'status-on-deck';
    if (statusLower.includes('field')) return 'status-on-field';
    if (statusLower.includes('completed')) return 'status-completed';
    return 'status-default';
  }

  function updateNextMatchSidebar(data) {
    const nextMatchCard = document.querySelector('.next-match-card');
    if (!nextMatchCard) return;
    
    const formattedTeamKey = '<%= formattedTeamKey %>';
    let nextMatch = null;
    let nextMatchAlliance = null;
    
    // Find the next match (first match in any non-completed group)
    if (data.matchGroups && Object.keys(data.matchGroups).length > 0) {
      for (const groupType in data.matchGroups) {
        if (data.matchGroups[groupType].length > 0) {
          nextMatch = data.matchGroups[groupType][0];
          nextMatchAlliance = nextMatch.redTeams.includes(formattedTeamKey) ? 'red' : 'blue';
          break;
        }
      }
    }
    
    let nextMatchHTML = '';
    
    if (nextMatch) {
      // Format time displays
      let nextMatchTimeDisplay = "TBD";
      if (nextMatch.times && nextMatch.times.scheduledStartTime) {
        try {
          const matchDate = new Date(nextMatch.times.scheduledStartTime);
          if (!isNaN(matchDate.getTime())) {
            nextMatchTimeDisplay = matchDate.toLocaleTimeString('en-US', {
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
          }
        } catch (e) {
          // Keep default "TBD" if date parsing fails
        }
      }
      
      let estimatedTimeDisplay = "";
      if (nextMatch.times && nextMatch.times.estimatedStartTime) {
        try {
          const estDate = new Date(nextMatch.times.estimatedStartTime);
          if (!isNaN(estDate.getTime())) {
            estimatedTimeDisplay = "Est: " + estDate.toLocaleTimeString('en-US', {
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
          }
        } catch (e) {
          // Keep empty if parsing fails
        }
      }
      
      nextMatchHTML = `
        <div class="next-match-details ${nextMatch.status === 'Now queuing' ? 'queuing' : ''}">
          <div class="next-match-number">
            <span>${nextMatch.label}</span>
          </div>
          <div class="next-match-time" data-timestamp="${nextMatch.times?.scheduledStartTime || ''}">
            ${nextMatchTimeDisplay}
          </div>
          
          ${estimatedTimeDisplay ? `
            <div class="next-match-estimated" data-timestamp="${nextMatch.times?.estimatedStartTime || ''}">
              ${estimatedTimeDisplay}
            </div>
          ` : ''}
          
          <div class="alliance-indicator ${nextMatchAlliance}">
            <div class="alliance-dot ${nextMatchAlliance}-alliance"></div>
            ${nextMatchAlliance.charAt(0).toUpperCase() + nextMatchAlliance.slice(1)} Alliance
          </div>
          
          <div class="next-match-teams">
            <div class="teams-section">
              <div class="teams-title red-title">Red Alliance</div>
              <div class="teams-list">
                ${nextMatch.redTeams.map(team => `
                  <div class="team-item ${team === formattedTeamKey ? 'highlight red-highlight' : ''}">
                    Team ${team}
                  </div>
                `).join('')}
              </div>
            </div>
            
            <div class="teams-section">
              <div class="teams-title blue-title">Blue Alliance</div>
              <div class="teams-list">
                ${nextMatch.blueTeams.map(team => `
                  <div class="team-item ${team === formattedTeamKey ? 'highlight blue-highlight' : ''}">
                    Team ${team}
                  </div>
                `).join('')}
              </div>
            </div>
          </div>
          
          <div class="match-status ${nextMatch.status === 'Now queuing' ? 'status-queuing' : nextMatch.status === 'On deck' ? 'status-on-deck' : nextMatch.status === 'On field' ? 'status-on-field' : 'status-default'}" style="text-align: center; margin-top: 5px;">
            ${nextMatch.status}
          </div>
        </div>
      `;
    } else {
      nextMatchHTML = `
        <div class="next-match-details">
          <div style="text-align: center; padding: 20px 0; color: var(--text-secondary); font-size: 1.2em;">
            N/A
          </div>
          <div style="text-align: center; color: var(--text-secondary); font-size: 0.9em;">
            No upcoming matches
          </div>
        </div>
      `;
    }
    
    // Update the sidebar content
    const nextMatchDetails = nextMatchCard.querySelector('.next-match-details');
    if (nextMatchDetails) {
      nextMatchDetails.outerHTML = nextMatchHTML;
    }
  }
</script>