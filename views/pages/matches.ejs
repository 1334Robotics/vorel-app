<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team <%= formattedTeamKey %> Matches</title>
  <%- include('../partials/styles') %>
  <style>
    .header {
      background-color: #1d1d1d;
      padding: 25px 0 0 0; /* Remove bottom padding */
      width: 100%;
      box-shadow: none; /* Remove shadow, will be on event-info instead */
      position: relative;
      z-index: 10;
      margin-bottom: 0; /* Remove margin as it's now on event-info */
    }
    
    .header-content {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0 60px; /* Increased left padding to make room for the icon */
      position: relative;
      max-width: 1200px;
      margin: 0 auto;
      min-height: 70px; /* Ensure minimum height to accommodate icon */
    }
    
    .header-subtitle {
      color: #e0e0e0;
      font-size: clamp(1em, 4vw, 1.4em); /* Responsive font size */
      font-weight: 600;
      text-align: center;
      margin-left: 10px; /* Added margin to ensure text doesn't crowd the icon */
      max-width: calc(100% - 100px); /* Prevent text from overlapping icon */
      overflow-wrap: break-word; /* Allow text to wrap naturally */
      white-space: normal; /* Allow wrapping if needed */
      line-height: 1.3;
    }
    
    .header-logo {
      height: auto;
      max-height: 70px;
      margin: 0 auto;
      border-radius: 4px;
      display: block;
    }
    
    .header-icon {
      position: absolute;
      left: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 40px;
      height: 40px;
      z-index: 1; /* Ensure icon stays on top */
    }
    
    .main-container {
      display: flex;
      flex-direction: row;
      gap: 20px;
      margin-top: 20px;
    }
    
    .matches-column {
      flex: 1;
      min-width: 0;
      max-width: 800px; /* Limit maximum width */
    }
    
    .info-column {
      width: 350px;
      position: sticky;
      top: 15px;
      align-self: flex-start;
    }
    
    .team-ranking-section, .next-match-card, .clock-section {
      background-color: #1d1d1d;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    }
    
    .info-title {
      font-size: 1.1em;
      font-weight: bold;
      color: #4fc3f7;
      margin-bottom: 10px;
      border-bottom: 1px solid #333;
      padding-bottom: 5px;
    }
    
    .ranking-stats {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }
    
    .stat-card {
      background-color: #252525;
      padding: 12px;
      border-radius: 6px;
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.6em;
      font-weight: bold;
      margin-bottom: 5px;
      color: #e0e0e0;
    }
    
    .stat-label {
      font-size: 0.9em;
      color: #aaa;
    }
    
    .next-match-details {
      background-color: #252525;
      padding: 12px;
      border-radius: 6px;
      margin-top: 10px;
    }
    
    .next-match-time {
      font-size: 1.4em;
      font-weight: bold;
      margin-bottom: 8px;
      color: #ff9800;
      text-align: center;
    }
    
    .next-match-number {
      font-size: 1.2em;
      margin-bottom: 8px;
      text-align: center;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 8px;
    }
    
    .match-number-badge {
      background-color: #333;
      color: #fff;
      padding: 4px 8px;
      border-radius: 4px;
      font-weight: bold;
    }
    
    .alliance-indicator {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 5px;
      margin-bottom: 8px;
      font-weight: bold;
      font-size: 1.1em;
    }
    
    .alliance-indicator.red {
      color: #f44336;
    }
    
    .alliance-indicator.blue {
      color: #2196f3;
    }
    
    .alliance-dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    .clock-display {
      font-size: 1.8em;
      font-weight: bold;
      text-align: center;
      margin: 10px 0;
      color: #e0e0e0;
    }
    
    .clock-date {
      text-align: center;
      color: #aaa;
      font-size: 0.9em;
    }
    
    .next-match-teams {
      margin-top: 10px;
      background-color: #2d2d2d;
      border-radius: 4px;
      padding: 10px;
    }

    .teams-section {
      margin-bottom: 10px;
    }

    .teams-section:last-child {
      margin-bottom: 0;
    }

    .teams-title {
      font-size: 0.9em;
      font-weight: bold;
      margin-bottom: 5px;
      display: flex;
      align-items: center;
    }

    .red-title {
      color: #f44336;
    }

    .blue-title {
      color: #2196f3;
    }

    .teams-list {
      display: flex;
      flex-direction: column;
      gap: 4px;
      margin-left: 5px;
    }

    .team-item {
      font-size: 0.9em;
      padding: 2px 5px;
      background-color: #3d3d3d;
      border-radius: 3px;
    }

    .team-item.highlight {
      text-decoration: underline;
      font-weight: bold;
    }
    
    .team-item.highlight.red-highlight {
      border-left: 3px solid #f44336;
      background-color: #3f2424;
    }
    
    .team-item.highlight.blue-highlight {
      border-left: 3px solid #2196f3;
      background-color: #1a2a3a;
    }
    
    .team-chip.highlight.red-team {
      background-color: #3f2424;
      font-weight: bold;
      border-width: 3px;
    }
    
    .team-chip.highlight.blue-team {
      background-color: #1a2a3a;
      font-weight: bold;
      border-width: 3px;
    }
    
    .event-info {
      background-color: #252525;
      padding: 10px 60px; 
      border-radius: 0 0 6px 6px;
      margin-top: 0;
      margin-bottom: 25px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      /* Fix to match header width exactly */
      width: calc(100% - 120px); /* Subtract the horizontal padding (60px * 2) */
      max-width: 1080px; /* 1200px - 120px padding */
      margin-left: auto;
      margin-right: auto;
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    }
    
    @media (max-width: 768px) {
      .main-container {
        flex-direction: column;
      }
      .info-column {
        width: 100%;
        position: static;
      }
      .header-icon {
        position: static;
        margin: 10px auto 0;
        transform: none;
      }
      .header-subtitle {
        margin: 10px 0;
        max-width: 100%;
        font-size: clamp(0.9em, 5vw, 1.2em); /* Slightly smaller on mobile */
      }
      .header-content {
        flex-direction: column;
        padding: 15px 20px;
      }
      .event-info {
        flex-direction: column;
        padding: 10px 20px;
        gap: 5px;
        width: calc(100% - 40px); /* Adjust for mobile padding */
        max-width: none;
      }
    }

    @keyframes blink-background {
      0% { background-color: #252525; }
      50% { background-color: #4a2917; }
      100% { background-color: #252525; }
    }

    .next-match-details.queuing {
      animation: blink-background 1.5s infinite;
      border: 2px solid #ff9800;
    }

    /* Update the style for estimated time */
    .next-match-estimated {
      font-size: 1.4em;
      font-weight: bold;
      color: #4caf50;
      text-align: center;
      margin-top: 8px;
      margin-bottom: 8px;
    }

    /* QR Code Floating Component */
    .qr-code-container {
      position: fixed;
      right: 20px;
      bottom: 20px;
      background-color: #1d1d1d;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.5);
      z-index: 100;
      width: 160px;
      transition: transform 0.3s ease, opacity 0.3s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .qr-code-container.hidden {
      transform: translateX(200px);
      opacity: 0;
      pointer-events: none;
    }

    .qr-code-title {
      font-size: 0.9em;
      font-weight: bold;
      margin-bottom: 10px;
      color: #4fc3f7;
      text-align: center;
    }

    .qr-code-canvas {
      background-color: white;
      padding: 10px;
      border-radius: 4px;
    }

    .qr-code-close {
      position: absolute;
      top: 5px;
      right: 5px;
      background: none;
      border: none;
      color: #aaa;
      cursor: pointer;
      font-size: 18px;
      padding: 2px 6px;
      border-radius: 50%;
      transition: background-color 0.2s;
    }

    .qr-code-close:hover {
      background-color: rgba(255,255,255,0.1);
      color: #fff;
    }

    .qr-code-info {
      color: #fff; /* Changed from #aaa to white for better visibility */
      font-size: 1.1em; /* Increased from 0.75em */
      text-align: center;
      margin-top: 10px;
      font-weight: 500; /* Added font weight for better visibility */
    }

    @media (max-width: 768px) {
      .qr-code-info {
        font-size: 0.9em; /* Increased from 0.7em for mobile */
      }
    }

    @media (max-width: 768px) {
      .qr-code-container {
        right: 10px;
        bottom: 10px;
        width: 120px;
        padding: 10px;
      }
      
      .qr-code-title {
        font-size: 0.8em;
      }
      
      .qr-code-info {
        font-size: 0.7em;
      }
    }

    /* QR Code reopen button */
    .qr-code-reopen {
      position: fixed;
      right: 20px;
      bottom: 20px;
      background-color: #1d1d1d;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center;
      box-shadow: 0 2px 5px rgba(0,0,0,0.3);
      cursor: pointer;
      z-index: 100;
      transition: all 0.3s ease;
      opacity: 0;
      pointer-events: none;
    }

    .qr-code-reopen.visible {
      opacity: 1;
      pointer-events: auto;
    }

    .qr-code-reopen:hover {
      background-color: #2d2d2d;
      transform: scale(1.1);
    }

    .qr-code-reopen svg {
      width: 20px;
      height: 20px;
      fill: #4fc3f7;
    }

    @media (max-width: 768px) {
      .qr-code-reopen {
        right: 10px;
        bottom: 10px;
        width: 36px;
        height: 36px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <div class="header-content">
        <img src="/icon.png" alt="Vorel Icon" class="header-icon" />
        <div class="header-subtitle">Team <%= formattedTeamKey %> Matches at <%= eventName %></div>
      </div>
    </div>
    
    <div class="event-info">
      <span>Event: <%= eventName %> (<%= eventKey %>)</span>
      <span class="now-queuing">Now Queuing: <%= nowQueuing || 'N/A' %></span>
    </div>
    
    <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
    <div class="error-message" style="background-color: #f44336; color: white; padding: 12px; margin: 15px 0; border-radius: 4px; text-align: center;">
      <strong>Error:</strong> <%= errorMessage %>
    </div>
    <% } %>
    
    <div class="main-container">
      <!-- LEFT COLUMN: Match listings -->
      <div class="matches-column">
        <div class="content">
          <% if (Object.keys(matchGroups).length === 0 && completedMatches.length === 0) { %>
            <div class="no-matches">
              <p>No matches found for team <%= formattedTeamKey %></p>
            </div>
          <% } else { %>
            <!-- Active/Upcoming Matches -->
            <% Object.keys(matchGroups).forEach(groupType => { %>
              <%- include('../partials/matchGroup', { 
                groupType, 
                matches: matchGroups[groupType], 
                formattedTeamKey,
                isCompletedGroup: false,
                isEmbedded: false
              }) %>
            <% }); %>
            
            <!-- Completed Matches -->
            <% if (completedMatches.length > 0) { %>
              <%- include('../partials/matchGroup', { 
                groupType: 'Completed', 
                matches: completedMatches, 
                formattedTeamKey,
                isCompletedGroup: true,
                isEmbedded: false
              }) %>
            <% } %>
          <% } %>
        </div>
      </div>
      
      <!-- RIGHT COLUMN: Team info, next match, and clock -->
      <div class="info-column">
        <!-- Team Ranking Section -->
        <% if (teamRanking) { %>
        <div class="team-ranking-section">
          <div class="info-title">Team <%= formattedTeamKey %> Ranking</div>
          <div class="ranking-stats">
            <div class="stat-card">
              <div class="stat-value">#<%= teamRanking.rank %></div>
              <div class="stat-label">Rank</div>
            </div>
            <div class="stat-card">
              <div class="stat-value"><%= teamRanking.record %></div>
              <div class="stat-label">Record (W-L-T)</div>
            </div>
            <div class="stat-card">
              <div class="stat-value"><%= teamRanking.matchesPlayed || "N/A" %></div>
              <div class="stat-label">Matches Played</div>
            </div>
            <div class="stat-card">
              <div class="stat-value"><%= teamRanking.matches %></div>
              <div class="stat-label">Total Teams</div>
            </div>
          </div>
        </div>
        <% } %>
        
        <!-- Next Match Section -->
        <% 
          let nextMatch = null;
          let nextMatchAlliance = null;
          
          // Find the next match
          if (Object.keys(matchGroups).length > 0) {
            for (const groupType in matchGroups) {
              if (matchGroups[groupType].length > 0) {
                nextMatch = matchGroups[groupType][0];
                nextMatchAlliance = nextMatch.redTeams.includes(formattedTeamKey) ? 'red' : 'blue';
                break;
              }
            }
          }
        %>
        
        <div class="next-match-card">
          <div class="info-title">Next Match</div>
          <div class="next-match-details <%= nextMatch && nextMatch.status === 'Now queuing' ? 'queuing' : '' %>">
            <% if (nextMatch) { %>
              <div class="next-match-number">
                <span><%= nextMatch.label %></span>
              </div>
              <div class="next-match-time" data-timestamp="<%= nextMatch.times.scheduledStartTime || '' %>">
                <% 
                  let nextMatchTimeDisplay = "TBD";
                  if (nextMatch.times.scheduledStartTime) {
                    try {
                      const matchDate = new Date(nextMatch.times.scheduledStartTime);
                      if (!isNaN(matchDate.getTime())) { // Check if the date is valid
                        nextMatchTimeDisplay = matchDate.toLocaleTimeString('en-US', {
                          hour: 'numeric',
                          minute: '2-digit',
                          hour12: true
                        });
                      }
                    } catch (e) {
                      // Keep default "TBD" if date parsing fails
                    }
                  }
                %>
                <%= nextMatchTimeDisplay %>
              </div>

              <% if (nextMatch.times.estimatedStartTime) { %>
                <div class="next-match-estimated" data-timestamp="<%= nextMatch.times.estimatedStartTime || '' %>">
                  <% 
                    let estimatedTimeDisplay = "Est: TBD";
                    try {
                      const estDate = new Date(nextMatch.times.estimatedStartTime);
                      if (!isNaN(estDate.getTime())) { // Check if the date is valid
                        estimatedTimeDisplay = "Est: " + estDate.toLocaleTimeString('en-US', {
                          hour: 'numeric',
                          minute: '2-digit',
                          hour12: true
                        });
                      }
                    } catch (e) {
                      // Keep default if date parsing fails
                    }
                  %>
                  <%= estimatedTimeDisplay %>
                </div>
              <% } %>

              <div class="alliance-indicator <%= nextMatchAlliance %>">
                <div class="alliance-dot <%= nextMatchAlliance %>-alliance"></div>
                <%= nextMatchAlliance.charAt(0).toUpperCase() + nextMatchAlliance.slice(1) %> Alliance
              </div>
              
              <!-- Teams in the match -->
              <div class="next-match-teams">
                <div class="teams-section">
                  <div class="teams-title red-title">Red Alliance</div>
                  <div class="teams-list">
                    <% nextMatch.redTeams.forEach(team => { %>
                      <div class="team-item <%= team === formattedTeamKey ? 'highlight red-highlight' : '' %>">
                        Team <%= team %>
                      </div>
                    <% }); %>
                  </div>
                </div>
                
                <div class="teams-section">
                  <div class="teams-title blue-title">Blue Alliance</div>
                  <div class="teams-list">
                    <% nextMatch.blueTeams.forEach(team => { %>
                      <div class="team-item <%= team === formattedTeamKey ? 'highlight blue-highlight' : '' %>">
                        Team <%= team %>
                      </div>
                    <% }); %>
                  </div>
                </div>
              </div>
              
              <div class="match-status <%= nextMatch.status === 'Now queuing' ? 'status-queuing' : nextMatch.status === 'On deck' ? 'status-on-deck' : nextMatch.status === 'On field' ? 'status-on-field' : 'status-default' %>" style="text-align: center; margin-top: 5px;">
                <%= nextMatch.status %>
              </div>
            <% } else { %>
              <div style="text-align: center; padding: 20px 0; color: #aaa; font-size: 1.2em;">
                N/A
              </div>
              <div style="text-align: center; color: #888; font-size: 0.9em;">
                No upcoming matches
              </div>
            <% } %>
          </div>
        </div>
        
        <!-- Clock Section -->
        <div class="clock-section">
          <div class="info-title">Current Time</div>
          <div class="clock-display" id="clock-time"></div>
          <div class="clock-date" id="clock-date"></div>
        </div>
      </div>
    </div>
    
    <%- include('../partials/footer', { eventKey }) %>
  </div>
  
  <!-- QR Code Component -->
  <div id="qr-code-container" class="qr-code-container hidden">
    <button class="qr-code-close" onclick="dismissQRCode()">&times;</button>
    <div class="qr-code-title">Scan to open on mobile</div>
    <div id="qr-code" class="qr-code-canvas"></div>
    <div class="qr-code-info">Want this for your team? Scan the QR code</div>
  </div>

  <%- include('../partials/scripts', { eventKey }) %>
  
  <script>
    // Add clock functionality
    function updateClock() {
      const now = new Date();
      
      // Update time
      document.getElementById('clock-time').textContent = now.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
      });
      
      // Update date
      document.getElementById('clock-date').textContent = now.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      setTimeout(updateClock, 1000);
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      updateClock();
    });

    // QR Code functionality
    document.addEventListener('DOMContentLoaded', function() {
      // Check if it's a mobile device using a common method
      const isMobile = /Android|iPhone|iPad|iPod|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      // Check if Web Share API is available (mostly on mobile devices)
      const canShare = navigator.share !== undefined;
      
      // First, check if QR code was previously dismissed
      const qrDismissed = localStorage.getItem('qrDismissed');
      
      if (isMobile || canShare) {
        // On mobile: Convert QR button to share button
        document.getElementById('qr-code-container').classList.add('hidden');
        document.getElementById('qr-code-reopen').innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
          </svg>
        `;
        document.getElementById('qr-code-reopen').classList.add('visible');
        
        // Update the onclick for share functionality
        document.getElementById('qr-code-reopen').onclick = shareContent;
      } else {
        // On desktop
        if (qrDismissed === 'true') {
          // If QR code was dismissed before, show the reopen button
          document.getElementById('qr-code-reopen').classList.add('visible');
        } else {
          // Add QR code script
          const script = document.createElement('script');
          script.src = "https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js";
          script.onload = generateQRCode;
          document.head.appendChild(script);
          
          // Show QR code after a short delay
          setTimeout(() => {
            document.getElementById('qr-code-container').classList.remove('hidden');
          }, 1500);
        }
      }
    });

    // Share functionality for mobile
    function shareContent() {
      const currentUrl = window.location.href;
      const eventKey = '<%= eventKey %>'; // Get from EJS template
      const teamKey = '<%= formattedTeamKey %>'; // Get from EJS template
      
      if (navigator.share) {
        navigator.share({
          title: `Team ${teamKey} Matches at <%= eventName %>`,
          text: `Check out Team ${teamKey}'s matches at <%= eventName %>`,
          url: currentUrl
        })
        .then(() => console.log('Share successful'))
        .catch((error) => console.log('Error sharing:', error));
      } else {
        // Fallback if Web Share API is not available
        reopenQRCode();
      }
    }

    function generateQRCode() {
      // Change to home page URL instead of current URL
      const homeURL = window.location.origin; // This will get the base URL (e.g., http://localhost:3002)
      
      // Generate QR code
      const qr = qrcode(0, 'L');
      qr.addData(homeURL);
      qr.make();
      
      // Display QR code
      document.getElementById('qr-code').innerHTML = qr.createImgTag(4);
    }

    function dismissQRCode() {
      // Hide the QR code
      document.getElementById('qr-code-container').classList.add('hidden');
      
      // Remember the dismissal in localStorage
      localStorage.setItem('qrDismissed', 'true');
      
      // Show the reopen button after a short delay
      setTimeout(() => {
        const reopenButton = document.getElementById('qr-code-reopen');
        reopenButton.classList.add('visible');
      }, 300);
    }

    function reopenQRCode() {
      // Hide the reopen button
      document.getElementById('qr-code-reopen').classList.remove('visible');
      
      // Show the QR code container
      document.getElementById('qr-code-container').classList.remove('hidden');
      
      // Ensure we have the QR code library loaded
      if (typeof qrcode !== 'function') {
        const script = document.createElement('script');
        script.src = "https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js";
        script.onload = generateQRCode;
        document.head.appendChild(script);
      } else {
        // If already loaded, just regenerate the code
        generateQRCode();
      }
    }
  </script>

  <!-- QR Code Reopen Button -->
  <div id="qr-code-reopen" class="qr-code-reopen" onclick="reopenQRCode()">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path d="M3 3h7v7H3V3zm2 2v3h3V5H5zm9-2h7v7h-7V3zm2 2v3h3V5h-3zM3 14h7v7H3v-7zm2 2v3h3v-3H5zm13-2v3h4v-3h-4zm-6 0v7h2v-7h-2zm4 7v-2h-2v2h2z"/>
    </svg>
  </div>
</body>
</html>