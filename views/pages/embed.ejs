<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Team <%= formattedTeamKey %> Matches at <%= eventName %> | Vorel</title>
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://vorel.app/?teamKey=<%= formattedTeamKey %>&eventKey=<%= eventKey %>">
  <meta property="og:title" content="Team <%= formattedTeamKey %> Matches at <%= eventName %>">
  <meta property="og:description" content="Embedded match schedule and results for FRC Team <%= formattedTeamKey %> at <%= eventName %>">
  <meta property="og:image" content="https://vorel.app/banner-social3.png">

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content="https://vorel.app/?teamKey=<%= formattedTeamKey %>&eventKey=<%= eventKey %>">
  <meta name="twitter:title" content="Team <%= formattedTeamKey %> Matches at <%= eventName %>">
  <meta name="twitter:description" content="Embedded match schedule and results for FRC Team <%= formattedTeamKey %> at <%= eventName %>">
  <meta name="twitter:image" content="https://vorel.app/banner-social3.png">
  
  <!-- Include your existing styles -->
  <%- include('../partials/styles') %>
  <%- include('../style/style-embed') %>
  <script>
    // Add this before the closing </head> tag
    (function() {
      // Create and add a style tag to ensure refresh overlay is visible immediately
      const style = document.createElement('style');
      style.textContent = '.refresh-overlay { opacity: 1 !important; pointer-events: all !important; }';
      document.head.appendChild(style);
      
      // Remove the style after a short delay to let CSS transitions take over
      setTimeout(() => {
        document.head.removeChild(style);
      }, 100);
    })();
  </script>
</head>
<body>
  <!-- Add refresh overlay at the beginning of body -->
  <div id="refresh-overlay" class="refresh-overlay active">
    <div class="refresh-spinner">
      <div class="cube-face front"></div>
      <div class="cube-face back"></div>
      <div class="cube-face right"></div>
      <div class="cube-face left"></div>
      <div class="cube-face top"></div>
      <div class="cube-face bottom"></div>
    </div>
  </div>
  
  <div class="container">
    <div class="header">
      Team <%= formattedTeamKey %> Matches at <%= eventName %>
    </div>
    
    <div class="event-info">
      <span>Event: <%= eventName %> (<%= eventKey %>)</span>
      <span class="now-queuing">Now Queuing: <%= nowQueuing || 'N/A' %></span>
    </div>
    
    <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
      <div class="full-cover-error">
        <div class="error-container">
          <img src="/banner2.png" alt="Vorel App Logo" class="error-logo">
          <h2><%= eventName %> has not started yet or there has been an issue</h2>
          <p>Please contact the website owner for assistance</p>
          <p class="status-code">Status code: <%= errorMessage.includes('status: ') ? errorMessage.match(/status: (\d+)/)[1] : 'Unknown' %></p>
          <p class="error-details"><%= errorMessage %></p>
        </div>
      </div>
    <% } else if (Object.keys(matchGroups).length === 0 && completedMatches.length === 0) { %>
      <div class="full-cover-error">
        <div class="error-container">
          <img src="/banner2.png" alt="Vorel App Logo" class="error-logo">
          <h2><%= eventName %> has not started yet</h2>
          <p>No matches found for team <%= formattedTeamKey %></p>
          <p>Please check back later or contact the website owner if this persists</p>
        </div>
      </div>
    <% } else { %>
      <div class="content">
        <!-- Active/Upcoming Matches -->
        <% Object.keys(matchGroups).forEach(groupType => { %>
          <%- include('../partials/matchGroup', { 
            groupType, 
            matches: matchGroups[groupType], 
            formattedTeamKey,
            isCompletedGroup: false,
            isEmbedded: true
          }) %>
        <% }); %>

        <!-- Completed Matches -->
        <% if (completedMatches.length > 0) { %>
          <%- include('../partials/matchGroup', { 
            groupType: 'Completed', 
            matches: completedMatches, 
            formattedTeamKey,
            isCompletedGroup: true,
            isEmbedded: true
          }) %>
        <% } %>
      </div>
    <% } %>
    
    <%- include('../partials/footer', { eventKey }) %>
  </div>
  
  <%- include('../partials/scripts', { eventKey }) %>
  <script>
    // Initialize match toggling
    document.addEventListener('DOMContentLoaded', function() {
      const matchHeaders = document.querySelectorAll('.match-header');
      matchHeaders.forEach(header => {
        header.addEventListener('click', function() {
          const details = this.parentNode.querySelector('.match-details');
          if (details) {
            details.classList.toggle('active');
          }
        });
      });
      
      // Hide the loading animation when DOM is loaded
      const refreshOverlay = document.getElementById('refresh-overlay');
      if (refreshOverlay) {
        setTimeout(() => {
          refreshOverlay.classList.remove('active');
        }, 200);
      }
      
      // Setup refresh animation
      setupRefreshAnimation();
    });
    
    // Function to set up the refresh animation logic
    function setupRefreshAnimation() {
      // Get the refresh overlay element
      const refreshOverlay = document.getElementById('refresh-overlay');
      
      // Create a function to intercept the regular reload and replace it with animation
      window.performAnimatedRefresh = function() {
        // Show the animation
        refreshOverlay.classList.add('active');
        
        // After animation completes, fetch the updated content
        setTimeout(() => {
          // Fetch the same page with the same parameters
          fetch(window.location.href)
            .then(response => response.text())
            .then(html => {
              // Create a temporary element to parse the HTML
              const tempDiv = document.createElement('div');
              tempDiv.innerHTML = html;
              
              // Update the content
              const newContent = tempDiv.querySelector('.content');
              const currentContent = document.querySelector('.content');
              
              if (newContent && currentContent) {
                currentContent.innerHTML = newContent.innerHTML;
              }
              
              // Update the event info section
              const newEventInfo = tempDiv.querySelector('.event-info');
              const currentEventInfo = document.querySelector('.event-info');
              
              if (newEventInfo && currentEventInfo) {
                currentEventInfo.innerHTML = newEventInfo.innerHTML;
              }
              
              // Hide the animation
              refreshOverlay.classList.remove('active');
              
              // Re-initialize match toggling
              const matchHeaders = document.querySelectorAll('.match-header');
              matchHeaders.forEach(header => {
                header.addEventListener('click', function() {
                  const details = this.parentNode.querySelector('.match-details');
                  if (details) {
                    details.classList.toggle('active');
                  }
                });
              });
            })
            .catch(error => {
              console.error('Error fetching updated content:', error);
              // If there's an error, just do a regular page reload
              refreshOverlay.classList.remove('active');
              window.location.reload();
            });
        }, 1000);  // Wait for animation to complete
      };
    }

    // Update the callback method to use the animated refresh instead of reload
    window._dataCheckCallback = function(changed) {
      if (changed) {
        if (typeof window.performAnimatedRefresh === 'function') {
          window.performAnimatedRefresh();
        } else {
          window.location.reload();  // Fallback if our function isn't available
        }
      }
    };
  </script>
</body>
</html>