<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vorel - FRC Match Schedule & Results Tracker | Real-time Robot Competition Data</title>
  
  
  <meta name="description" content="Track FRC match schedules, rankings, and results in real-time. The ultimate companion for FIRST Robotics Competition teams with live updates from FIRST Nexus and The Blue Alliance.">
  <meta name="keywords" content="FRC, FIRST Robotics Competition, match schedule, team rankings, real-time results, robotics competition tracker">
  <meta name="robots" content="index, follow">
  <meta name="author" content="1334 Robotics">
  
  
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://vorel.app">
  <meta property="og:title" content="Vorel - Real-time FRC Match Schedule & Results Tracker">
  <meta property="og:description" content="Track your FRC team's competition journey with live match updates, detailed results, and ranking points. The essential tool for FIRST Robotics Competition teams.">
  <meta property="og:image" content="https://vorel.app/banner-social3.avif">

  
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content="https://vorel.app">
  <meta name="twitter:title" content="Vorel - Real-time FRC Match Schedule & Results Tracker">
  <meta name="twitter:description" content="Track your FRC team's competition journey with live match updates, detailed results, and ranking points. The essential tool for FIRST Robotics Competition teams.">
  <meta name="twitter:image" content="https://vorel.app/banner-social3.avif">

  
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#333333">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="Vorel">
  <link rel="apple-touch-icon" href="/icon-192.png">

  
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "SoftwareApplication",
      "name": "Vorel",
      "applicationCategory": "SportsApplication",
      "operatingSystem": "Web",
      "url": "https://vorel.app",
      "description": "Vorel.app is the ultimate companion for FIRST Robotics Competition teams, providing real-time match schedules, statuses, results, and team rankings through FIRST Nexus and The Blue Alliance APIs.",
      "creator": {
        "@type": "Organization",
        "name": "1334 Robotics",
        "url": "https://github.com/1334Robotics"
      }
    }
  </script>
  
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [ {
        "@type": "Question",
        "name": "What is Vorel.app?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Vorel is a real-time FRC match schedule and results tracker that combines data from FIRST Nexus API and The Blue Alliance to provide comprehensive match information for FIRST Robotics Competition teams."
        }
      }, {
        "@type": "Question",
        "name": "How do I use Vorel.app?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Enter your team number and select an event to view your match schedule, results, and ranking information in real-time."
        }
      } ]
    }
  </script>
  
  <%- include('../style/style-home') %>
</head>
<body>
  <div class="main-content">
    <div class="hero">
      <div class="container">
        <img src="/banner.avif" alt="Vorel App Banner" class="hero-logo" />
        <h1 class="hero-title">FRC Match Schedule & Results Tracker</h1>
        <p class="hero-subtitle">
          The ultimate companion for FRC teams tracking competition journeys with real-time updates
        </p>
        
        <% if (notices && notices.length > 0) { %>
          <% notices.forEach(notice => { %>
            <div class="<%= notice.type %>-notice">
              <div class="notice-content">
                <h3><%= notice.title %></h3>
                <p><%- notice.content %></p>
              </div>
            </div>
          <% }); %>
        <% } %>
        
        <h2 class="section-title">Key Features</h2>
        <div class="features">
          <div class="feature-card">
            <div class="feature-icon">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M13 2.05V5.08C16.39 5.57 19 8.47 19 12C19 15.87 15.87 19 12 19C8.47 19 5.57 16.39 5.08 13H2.05C2.55 17.94 6.81 22 12 22C17.51 22 22 17.51 22 12C22 6.81 17.94 2.55 13 2.05ZM12 7C9.24 7 7 9.24 7 12C7 14.76 9.24 17 12 17C14.76 17 17 14.76 17 12C17 9.24 14.76 7 12 7Z" fill="currentColor"/>
              </svg>
            </div>
            <h3 class="feature-title">Real-time Updates</h3>
            <p class="feature-description">Get live match updates directly from FIRST Nexus API as they happen.</p>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM9 17H7V10H9V17ZM13 17H11V7H13V17ZM17 17H15V13H17V17Z" fill="currentColor"/>
              </svg>
            </div>
            <h3 class="feature-title">Comprehensive Results</h3>
            <p class="feature-description">View detailed match results with alliance scoring breakdown.</p>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM9 17H7V14H9V17ZM13 17H11V10H13V17ZM17 17H15V7H17V17Z" fill="currentColor"/>
              </svg>
            </div>
            <h3 class="feature-title">Team Rankings</h3>
            <p class="feature-description">Track team rankings and performance stats throughout the event.</p>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 3H3C1.9 3 1 3.9 1 5V19C1 20.1 1.9 21 3 21H21C22.1 21 23 20.1 23 19V5C23 3.9 22.1 3 21 3ZM21 19H3V5H21V19Z" fill="currentColor"/>
                <path d="M9 8H7V16H9V8Z" fill="currentColor"/>
                <path d="M17 8H15V12H17V8Z" fill="currentColor"/>
                <path d="M13 8H11V18H13V8Z" fill="currentColor"/>
              </svg>
            </div>
            <h3 class="feature-title">Embeddable Displays</h3>
            <p class="feature-description">Easily embed match information on team websites (documentation coming soon)</p>
          </div>
        </div>
        
        <div class="search-section">
          <h2 class="search-title">View Your Team's Matches</h2>
          
          <form method="get" action="/">            <div class="form-row">
              <label for="teamKey">Team Number</label>
              <input type="text" name="teamKey" id="teamKey" placeholder="Enter team number (e.g., 1334 or frc1334)" />
              <span class="input-hint">Enter your team number to auto-find event</span>
            </div>
            
            <div class="form-row">
              <label for="eventSearch">Event</label>
              <div class="search-container">
                <input type="text" name="eventSearch" id="eventSearch" placeholder="Search for an event (e.g., Ontario Provincial Championship)" autocomplete="off" />
                <input type="hidden" name="eventKey" id="eventKey" />
                <div class="search-results" id="searchResults"></div>
              </div>
              <span class="input-hint">Search for events by name, or event key (Note: Only 2025+ Events are valid)</span>
            </div>
            
            <button type="submit" id="viewMatchesBtn">
              <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M15.5 14H14.71L14.43 13.73C15.41 12.59 16 11.11 16 9.5C16 5.91 13.09 3 9.5 3C5.91 3 3 5.91 3 9.5C3 13.09 5.91 16 9.5 16C11.11 16 12.59 15.41 13.73 14.43L14 14.71V15.5L19 20.49L20.49 19L15.5 14ZM9.5 14C7.01 14 5 11.99 5 9.5C5 7.01 7.01 5 9.5 5C11.99 5 14 7.01 14 9.5C14 11.99 11.99 14 9.5 14Z" fill="currentColor"/>
              </svg>
              <span class="btn-text">View Matches</span>
              <span class="loading-bars" style="display:none;">
                <span class="bar"></span>
                <span class="bar"></span>
                <span class="bar"></span>
              </span>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- <div class="donate-section">
    <div class="donate-card">
      <div class="donate-title">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" style="vertical-align:middle;margin-right:6px;"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" fill="#ff5252"/></svg>
        Support Vorel
      </div>
      <div class="donate-desc">If you find this app useful, consider supporting its development! Your donation helps keep Vorel up-to-date and easily accessible for all FRC teams.</div>
      <a class="donate-btn" href="https://vorel.app/placeholder" target="_blank" rel="noopener">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" style="vertical-align:middle;margin-right:5px;"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" fill="#fff"/></svg>
        Donate via placeholder
      </a>
    </div>
  </div> -->
  <footer class="footer">
    <div class="container">
      <img src="/banner2.avif" alt="Vorel App Presented By 1334 Banner" class="footer-logo" />
      <div class="footer-subtitle">FRC Match Schedule & Results Tracker</div>
      <div class="footer-info">Data provided by FIRST Nexus API & The Blue Alliance APIs</div>
      <div class="footer-copyright">Vorel App © 2025 • 
  <a href="https://github.com/1334Robotics/vorel-app">GitHub</a> • 
  <a href="https://vorel.app/changelog">Changelog</a>
</div>
    </div>
  </footer>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('eventSearch');
      const eventKeyInput = document.getElementById('eventKey');
      const searchResults = document.getElementById('searchResults');
      const teamKeyInput = document.getElementById('teamKey');
        let selectedIndex = -1;
      let searchTimeout;
      let teamSearchTimeout;
      let events = [];
      let lastAutoSelectedTeam = null; // Track which team was auto-selected
      let isManualSelection = false; // Track if user manually selected an event
      
      const form = document.querySelector('form');
      const viewMatchesBtn = document.getElementById('viewMatchesBtn');
      const btnText = viewMatchesBtn.querySelector('.btn-text');
      const loadingBars = viewMatchesBtn.querySelector('.loading-bars');
      const svgIcon = viewMatchesBtn.querySelector('.search-icon');

      // Function to reset button state
      function resetButtonState() {
        viewMatchesBtn.disabled = false;
        btnText.style.display = 'inline';
        loadingBars.style.display = 'none';
        if (svgIcon) svgIcon.style.display = 'inline';
      }

      // Reset button state when page becomes visible (handles browser back button)
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          resetButtonState();
        }
      });

      // Reset button state when page is shown (handles browser back/forward navigation)
      window.addEventListener('pageshow', (event) => {
        resetButtonState();
      });

      // Reset button state immediately on load (handles page refresh)
      resetButtonState();      form.addEventListener('submit', (e) => {
        // Reset button state first in case of validation errors
        resetButtonState();
        
        const teamKeyInput = document.getElementById('teamKey');
        const eventSearchInput = document.getElementById('eventSearch');
        const eventKeyInput = document.getElementById('eventKey');
        
        eventSearchInput.removeAttribute('name');
          if (!teamKeyInput.value.trim()) {
          e.preventDefault();
          
          let teamErrorMsg = document.querySelector('.team-error');
          if (!teamErrorMsg) {
            teamErrorMsg = document.createElement('div');
            teamErrorMsg.className = 'team-error';
            teamErrorMsg.style.color = '#ff5252';
            teamErrorMsg.style.fontSize = '0.9em';
            teamErrorMsg.style.marginTop = '5px';
            teamErrorMsg.textContent = 'Please enter a team number';
            teamKeyInput.parentNode.appendChild(teamErrorMsg);
          }
          
          teamKeyInput.style.borderColor = '#ff5252';
        }
        
        if (eventSearchInput.value.trim() && !eventKeyInput.value.trim()) {
          e.preventDefault();
          
          let errorMsg = document.querySelector('.event-error');
          if (!errorMsg) {
            errorMsg = document.createElement('div');
            errorMsg.className = 'event-error';
            errorMsg.style.color = '#ff5252';
            errorMsg.style.fontSize = '0.9em';
            errorMsg.style.marginTop = '5px';
            errorMsg.textContent = 'Please select an event from the search results';
            eventSearchInput.parentNode.appendChild(errorMsg);
          }
          
          eventSearchInput.style.borderColor = '#ff5252';
        }
        
        // Special validation: if no event is selected but team has events, suggest using auto-selection
        if (!eventSearchInput.value.trim() && !eventKeyInput.value.trim() && teamKeyInput.value.trim()) {
          e.preventDefault();
          
          let eventErrorMsg = document.querySelector('.event-error');
          if (!eventErrorMsg) {
            eventErrorMsg = document.createElement('div');
            eventErrorMsg.className = 'event-error';
            eventErrorMsg.style.color = '#ff9800';
            eventErrorMsg.style.fontSize = '0.9em';
            eventErrorMsg.style.marginTop = '5px';
            eventErrorMsg.textContent = 'Please wait for event auto-selection or manually search for an event';
            eventSearchInput.parentNode.appendChild(eventErrorMsg);
          }
        }

        // Only show loading if validation passes
        if (
          document.getElementById('teamKey').value.trim() &&
          (!document.getElementById('eventSearch').value.trim() || document.getElementById('eventKey').value.trim())
        ) {
          viewMatchesBtn.disabled = true;
          btnText.style.display = 'none';
          loadingBars.style.display = 'inline-flex';
          if (svgIcon) svgIcon.style.display = 'none';
        }
      });      document.getElementById('teamKey').addEventListener('input', (e) => {
        e.target.style.borderColor = '';
        const errorMsg = document.querySelector('.team-error');
        if (errorMsg) errorMsg.remove();
        
        // Handle team events auto-population
        const teamNumber = e.target.value.trim();
        const numericTeamKey = teamNumber.replace(/^frc/i, '');
        
        // If team number changed and we had an auto-selection for a different team, clear it
        if (lastAutoSelectedTeam && lastAutoSelectedTeam !== numericTeamKey && !isManualSelection) {
          searchInput.value = '';
          eventKeyInput.value = '';
          lastAutoSelectedTeam = null;
        }
        
        clearTimeout(teamSearchTimeout);
        if (teamNumber.length >= 1 && /^\d+$/.test(numericTeamKey)) {
          teamSearchTimeout = setTimeout(() => {
            fetchTeamEvents(teamNumber);
          }, 500); // Slightly longer delay for team search
        } else {
          // If team number is cleared or invalid, clear auto-selection
          if (!isManualSelection) {
            searchInput.value = '';
            eventKeyInput.value = '';
            lastAutoSelectedTeam = null;
          }
        }
      });

      // Function to fetch and auto-populate team events
      function fetchTeamEvents(teamNumber, retryCount = 0) {
        const numericTeamKey = teamNumber.replace(/^frc/i, '');
        const maxRetries = 2;
        
        fetch(`/api/team-events?teamKey=${encodeURIComponent(numericTeamKey)}`)
          .then(response => {
            if (!response.ok) {
              throw new Error(`API responded with status: ${response.status}`);
            }
            return response.json();
          })          .then(teamEvents => {
            if (teamEvents.length > 0) {
              // Find the best event to auto-populate
              const bestEvent = findBestEventForTeam(teamEvents);
              const numericTeamKey = teamNumber.replace(/^frc/i, '');
              
              // Auto-populate if:
              // 1. We have a best event AND
              // 2. Either the fields are empty OR we're updating a previous auto-selection for a different team
              const shouldAutoPopulate = bestEvent && (
                (!searchInput.value.trim() && !eventKeyInput.value.trim()) || // Fields are empty
                (lastAutoSelectedTeam && lastAutoSelectedTeam !== numericTeamKey && !isManualSelection) // Different team, not manual
              );
              
              if (shouldAutoPopulate) {
                // Only auto-populate if the user hasn't manually selected an event
                searchInput.value = bestEvent.name;
                eventKeyInput.value = bestEvent.key;
                lastAutoSelectedTeam = numericTeamKey;
                isManualSelection = false; // This is an auto-selection
                
                // Clear any existing search results
                searchResults.innerHTML = '';
                searchResults.classList.remove('active');
                
                // Visual feedback that an event was auto-selected
                searchInput.style.borderColor = '#4fc3f7';
                const eventHint = document.querySelector('#eventSearch').parentNode.querySelector('.input-hint');
                if (eventHint) {
                  const originalText = eventHint.textContent;
                  eventHint.textContent = `Auto-selected ${bestEvent.status} event: ${bestEvent.name}`;
                  eventHint.classList.add('auto-selected');
                  
                  setTimeout(() => {
                    eventHint.textContent = originalText;
                    eventHint.classList.remove('auto-selected');
                    searchInput.style.borderColor = '';
                  }, 4000);
                }
              }
            } else if (retryCount === 0) {
              // No events found, but this might be because cache is being built
              // Show a "loading" state and retry once
              const teamHint = teamKeyInput.parentNode.querySelector('.input-hint');
              if (teamHint) {
                const originalText = teamHint.textContent;
                teamHint.textContent = 'Loading team events...';
                teamHint.style.color = '#4fc3f7';
                
                setTimeout(() => {
                  teamHint.textContent = originalText;
                  teamHint.style.color = '';
                }, 2000);
              }
              
              // Retry after 2 seconds
              setTimeout(() => {
                fetchTeamEvents(teamNumber, retryCount + 1);
              }, 2000);
            }
          })
          .catch(error => {
            console.log('Team events fetch failed:', error.message);
            
            // Retry on certain errors
            if (retryCount < maxRetries && (error.message.includes('500') || error.message.includes('timeout'))) {
              console.log(`Retrying team events fetch (attempt ${retryCount + 1}/${maxRetries})`);
              setTimeout(() => {
                fetchTeamEvents(teamNumber, retryCount + 1);
              }, 1000 * (retryCount + 1)); // Exponential backoff
              return;
            }
            
            // Show error feedback only after all retries failed
            if (retryCount >= maxRetries) {
              const teamHint = teamKeyInput.parentNode.querySelector('.input-hint');
              if (teamHint) {
                const originalText = teamHint.textContent;
                teamHint.textContent = 'Unable to fetch team events. Please try manually searching.';
                teamHint.style.color = '#ff9800';
                
                setTimeout(() => {
                  teamHint.textContent = originalText;
                  teamHint.style.color = '';
                }, 4000);
              }            }
          });
      }
      
      // Function to determine the best event for a team
      function findBestEventForTeam(teamEvents) {
        // Priority: ongoing > upcoming (closest) > completed (most recent)
        
        // First, look for ongoing events (prioritize most recently started)
        const ongoingEvents = teamEvents.filter(event => event.status === 'ongoing');
        if (ongoingEvents.length > 0) {
          return ongoingEvents[0]; // Return first ongoing event (already sorted)
        }
        
        // Then, look for upcoming events (closest to current date)
        const upcomingEvents = teamEvents.filter(event => event.status === 'upcoming');
        if (upcomingEvents.length > 0) {
          return upcomingEvents[0]; // Return closest upcoming event
        }
        
        // Finally, look for recently completed events (most recent first)
        const completedEvents = teamEvents.filter(event => event.status === 'completed');
        if (completedEvents.length > 0) {
          return completedEvents[0]; // Return most recent completed event
        }
        
        // Fallback to first event if status detection failed
        return teamEvents[0] || null;
      }      // ...existing event search handlers...
      searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        
        // Mark as manual input if user is typing (not programmatic)
        if (e.isTrusted) {
          isManualSelection = true;
        }
        
        // If the user clears the search field, also clear the hidden event key
        if (!query) {
          eventKeyInput.value = '';
          if (e.isTrusted) {
            // User manually cleared, reset auto-selection tracking
            lastAutoSelectedTeam = null;
            isManualSelection = false;
          }
        }
        
        eventKeyInput.value = '';
        
        searchInput.style.borderColor = '';
        const errorMsg = document.querySelector('.event-error');
        if (errorMsg) errorMsg.remove();
        
        clearTimeout(searchTimeout);
        
        if (query.length < 3) {
          searchResults.innerHTML = '';
          searchResults.classList.remove('active');
          return;
        }
        
        searchTimeout = setTimeout(() => {
          fetchEvents(query);
        }, 300);
      });
      
      // Also reposition when the search input gains focus
      searchInput.addEventListener('focus', () => {
        if (searchResults.classList.contains('active')) {
          setTimeout(() => positionSearchResults(), 10);
        }
      });
      
      searchInput.addEventListener('keydown', (e) => {
        if (!searchResults.classList.contains('active')) return;
        
        const items = searchResults.querySelectorAll('.search-item');
        
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
          updateSelection(items);
        }
        
        if (e.key === 'ArrowUp') {
          e.preventDefault();
          selectedIndex = Math.max(selectedIndex - 1, -1);
          updateSelection(items);
        }
        
        if (e.key === 'Enter') {
          e.preventDefault();
          if (selectedIndex > -1 && selectedIndex < items.length) {
            items[selectedIndex].click();
          } else if (items.length > 0) {
            // Auto-select the first item if no item is selected
            selectedIndex = 0;
            updateSelection(items);
            items[0].click();          }
        }
        
        if (e.key === 'Escape') {
          closeSearchResults();
        }
      });
      
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          closeSearchResults();
        }
      });
      
      // Reposition dropdown on window resize
      window.addEventListener('resize', () => {
        if (searchResults.classList.contains('active')) {
          positionSearchResults();
        }
      });
      
      // Also reposition on scroll
      window.addEventListener('scroll', () => {
        if (searchResults.classList.contains('active')) {
          positionSearchResults();
        }
      });
      
      function updateSelection(items) {
        items.forEach((item, index) => {
          if (index === selectedIndex) {
            item.classList.add('selected');
            item.scrollIntoView({ block: 'nearest' });
          } else {
            item.classList.remove('selected');
          }
        });
      }
      
      function closeSearchResults() {
        searchResults.classList.remove('active');
        selectedIndex = -1;
      }
      
      function fetchEvents(query) {
        fetch(`/api/events/search?q=${encodeURIComponent(query)}`)
          .then(response => {
            if (!response.ok) {
              throw new Error(`API responded with status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            events = data;
            displayResults(events);
          })
          .catch(error => {
            console.error('Error searching events:', error);
            searchResults.innerHTML = '';
            
            const errorElement = document.createElement('div');
            errorElement.className = 'search-item';
            errorElement.style.color = '#ff5252';
            errorElement.textContent = 'Unable to fetch events. Please check your connection and try again.';
            searchResults.appendChild(errorElement);
              searchResults.classList.add('active');
          });
      }
      
      function displayResults(events) {
        searchResults.innerHTML = '';
        
        if (events.length === 0) {
          const noResults = document.createElement('div');
          noResults.className = 'search-item';
          noResults.textContent = 'No events found';
          searchResults.appendChild(noResults);
        } else {
          events.forEach(event => {
            const item = document.createElement('div');
            item.className = 'search-item';
            
            const nameDiv = document.createElement('div');
            nameDiv.className = 'event-name';
            nameDiv.textContent = event.name;
            
            const detailsDiv = document.createElement('div');
            detailsDiv.className = 'event-details';
            detailsDiv.textContent = `${event.location} • ${event.date}`;
            
            const keyDiv = document.createElement('div');
            keyDiv.className = 'event-key';
            keyDiv.textContent = `Event Key: ${event.key}`;
            
            item.appendChild(nameDiv);
            item.appendChild(detailsDiv);
            item.appendChild(keyDiv);
              item.addEventListener('click', () => {
              searchInput.value = event.name;
              eventKeyInput.value = event.key;
              isManualSelection = true; // Mark as manual selection
              lastAutoSelectedTeam = null; // Clear auto-selection tracking
              closeSearchResults();
            });
            
            searchResults.appendChild(item);
          });
        }
        
        // Position the dropdown appropriately
        positionSearchResults();
          searchResults.classList.add('active');
        selectedIndex = -1;
      }
      
      function positionSearchResults() {
        const rect = searchInput.getBoundingClientRect();
        const viewportHeight = window.innerHeight;
        const footerElement = document.querySelector('.footer');
        const footerRect = footerElement ? footerElement.getBoundingClientRect() : null;
        
        // Calculate available space more precisely
        let spaceBelow, spaceAbove;
        
        if (footerRect && footerRect.top > 0) {
          // Footer is visible, use footer position
          spaceBelow = Math.max(0, footerRect.top - rect.bottom - 20); // 20px margin
        } else {
          // Footer not visible or below viewport
          spaceBelow = Math.max(0, viewportHeight - rect.bottom - 20);
        }
        
        spaceAbove = Math.max(0, rect.top - 20); // 20px margin from top
        
        const minDropdownHeight = 80; // Minimum useful height
        const maxDropdownHeight = 250; // Original max height
        
        // Determine if we should show above or below
        let shouldShowAbove = false;
        let finalHeight = maxDropdownHeight;
        
        if (spaceBelow >= minDropdownHeight) {
          // Enough space below
          shouldShowAbove = false;
          finalHeight = Math.min(spaceBelow, maxDropdownHeight);
        } else if (spaceAbove >= minDropdownHeight) {
          // Not enough space below, but enough above
          shouldShowAbove = true;
          finalHeight = Math.min(spaceAbove, maxDropdownHeight);
        } else {
          // Not enough space in either direction, use the larger space
          if (spaceAbove > spaceBelow) {
            shouldShowAbove = true;
            finalHeight = Math.max(spaceAbove, 60); // Absolute minimum
          } else {
            shouldShowAbove = false;
            finalHeight = Math.max(spaceBelow, 60); // Absolute minimum
          }
        }
        
        // Apply positioning
        if (shouldShowAbove) {
          searchResults.classList.add('show-above');
        } else {
          searchResults.classList.remove('show-above');
        }
        
        // Set the height
        searchResults.style.maxHeight = `${finalHeight}px`;
      }
    });
  </script>
  <script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then(registration => {
          console.log('Service Worker registered successfully:', registration.scope);
        })
        .catch(error => {
          console.log('Service Worker registration failed:', error);
        });
    });
  }
</script>
</body>
</html>